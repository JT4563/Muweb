version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
      - "9090:9090" # Metrics port
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/codecrafter
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=your-production-jwt-secret
      - JWT_REFRESH_SECRET=your-production-refresh-secret
    depends_on:
      - mongo
      - redis
      - rabbitmq
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # For Docker-in-Docker
      - ./logs:/app/logs
    networks:
      - codecrafter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Code Execution Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/codecrafter
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      - mongo
      - redis
      - rabbitmq
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs:/app/logs
    networks:
      - codecrafter-network
    restart: unless-stopped
    deploy:
      replicas: 2 # Scale workers as needed

  # MongoDB Database
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=codecrafter
      - MONGO_INITDB_ROOT_PASSWORD=codecrafter123
      - MONGO_INITDB_DATABASE=codecrafter
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - codecrafter-network
    restart: unless-stopped
    command: mongod --auth

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - codecrafter-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=codecrafter
      - RABBITMQ_DEFAULT_PASS=codecrafter123
      - RABBITMQ_DEFAULT_VHOST=codecrafter
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - codecrafter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - codecrafter-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - codecrafter-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=codecrafter123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - codecrafter-network
    restart: unless-stopped

  # Code Execution Sandbox Containers
  # JavaScript/Node.js
  sandbox-node:
    image: node:18-alpine
    command: tail -f /dev/null
    working_dir: /workspace
    volumes:
      - /tmp/codecrafter/executions:/workspace
    networks:
      - codecrafter-sandbox
    restart: "no"
    cpus: 0.5
    memory: 128M
    read_only: true
    tmpfs:
      - /tmp:size=50M

  # Python
  sandbox-python:
    image: python:3.11-alpine
    command: tail -f /dev/null
    working_dir: /workspace
    volumes:
      - /tmp/codecrafter/executions:/workspace
    networks:
      - codecrafter-sandbox
    restart: "no"
    cpus: 0.5
    memory: 128M
    read_only: true
    tmpfs:
      - /tmp:size=50M

  # Java
  sandbox-java:
    image: openjdk:17-alpine
    command: tail -f /dev/null
    working_dir: /workspace
    volumes:
      - /tmp/codecrafter/executions:/workspace
    networks:
      - codecrafter-sandbox
    restart: "no"
    cpus: 0.5
    memory: 256M
    read_only: true
    tmpfs:
      - /tmp:size=50M

  # C/C++
  sandbox-cpp:
    image: gcc:alpine
    command: tail -f /dev/null
    working_dir: /workspace
    volumes:
      - /tmp/codecrafter/executions:/workspace
    networks:
      - codecrafter-sandbox
    restart: "no"
    cpus: 0.5
    memory: 128M
    read_only: true
    tmpfs:
      - /tmp:size=50M

  # Go
  sandbox-go:
    image: golang:alpine
    command: tail -f /dev/null
    working_dir: /workspace
    volumes:
      - /tmp/codecrafter/executions:/workspace
    networks:
      - codecrafter-sandbox
    restart: "no"
    cpus: 0.5
    memory: 128M
    read_only: true
    tmpfs:
      - /tmp:size=50M

  # Rust
  sandbox-rust:
    image: rust:alpine
    command: tail -f /dev/null
    working_dir: /workspace
    volumes:
      - /tmp/codecrafter/executions:/workspace
    networks:
      - codecrafter-sandbox
    restart: "no"
    cpus: 0.5
    memory: 128M
    read_only: true
    tmpfs:
      - /tmp:size=50M

networks:
  codecrafter-network:
    driver: bridge
  codecrafter-sandbox:
    driver: bridge
    internal: true # Isolated network for sandbox containers

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
